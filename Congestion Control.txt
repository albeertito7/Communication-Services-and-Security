
Resource allocation: set of procedures that allows a network element to decide about how to assign the available resources (bandwidth and buffers size)
    - decide about the traffic that arrives

Congestion Control: set of procedures that avoid or correct congestion at the network

- What is the difference between congestion control and flow control?
    - congestion control operates at network and/or transmitter
    - flow control does the same at receiver


Network Model: IP based
    - Packet switching: links and routers deal with discrete information units (IP packets)
    - Non-connected traffic flow => IP protocol is non-connected
        - routers can distinguish non-conntected traffic flows via IP addresses (source, destination) or Tags set by the source
    - Service model: sometimes the intermediate network should provide some information
        - Quality of service (QoS), telling the source the parameters to be accomplished (bandwidth, delay, ...)
        - one can ask to the network


** We want to understand the mechanisms on TCP and on routers that can avoid a network congestion situatio **

When a network is congested?
    - a router has several queues
    - the traffic enters throughs many ports and needs to be served
    - the scheduler is the one who decides which queue is served at any time to transmit the packets
    - if the queues are full => congestion situation => may produce loses and long delays


Service Policies
    - a router must employ a queue policy or service policy
    - queue poliy: the way a router schedules its incomming traffic
        - which packets must be transmitted and what order
        - which packets must be dropped if queue overflows

    - First In Frist Out (FIFO)
        - a drop tail procedure may be adhered
        - doesn't provide any kind of congestion control and resource allocation
        - implies external congestion control and resource allocation => e.g. at TCP layer
        - Variations:
            - tag IP packets with a priority field (TOS) => Type Of Service
            - implement multiple queues with different priority
            - Problem: high priority queues may block lower ones transmission => not fair

    - Fair Queueing (FQ)
        - assuming that congestion control and resource allocation relies on TCP, the problem of having greedy processes (UDP) murt be overcome
        - FQ solves the problem having multiple queues assigned to different streams, being served cyclically (Round-Robin) (RR)
        - STREAM: division of the bandwidth
        - Problem: because of diff size of the packets we can not guarantee to provide to each stream the specific bandwidth

        ** Fair queueing allows to make fair shceduling even the packets have diff length **

        - Different packet sizes. How they are served in order to guarantee the bandwith is the same to every stream?
            1. Packets arrive in sequence. Ai arribal time of the i_th packet. Si is the packet length
            2. Fi => estimated time to finish. When an arriving packet founds the server free, Fi = Ai + Si. When the server is busy, Fi = max(F', Ai) + Si
            3. Being F' the finish time of the packet being served
            4. The packet with the lower Fi is transmitted first

            ** when choosing a new packet to served, is not longer used a FIFO queue, it must be choose the one with less Fi **

        - So, Fi = max(F', Ai) + Si

        - some characteristics:
            - the system never remains idle when queues are not empty
            - when n active streams, non has more than 1/n of the network capacity
            - when a stream becomes idle, the released amount of bandwidth is shared amont the rest

    - Weighted Fair Queueing (WFQ)
        - weighted version
        - doing, Fi = max(F',Ai) + Si * rj
        - being:
            - F' the finish time for the current packet
            - 1/rj the bandwith fraction assigned to queue j. So, Σ from 0 to j of 1/rj <= 1


Exercise Fair Queueing:
    - Table below shows a FQ policy sequence of events being:
        - A, the arrival time of a given segment,
        - S, size of the segment

        - Fullfill the table, knowing that:
            - F is the estimated finishing time of FQ policy,
            - Ti is the start transmission time for segment,
            - and Tf is its finish transmission time

        ╔════════════════════════════════════════════════════════╗                          
        ║    A          S           F           Ti          Tf   ║
        ╠════════════════════════════════════════════════════════╣
        ║   0           4           4           3            7   ║
        ║   0           1           1           0            1   ║
        ║   0.9         1           2           1            2   ║
        ║   1.5         1           3           2            3   ║
        ║   5           2           9           7            9   ║
        ║   8.9         2           11          9            11  ║
        ║   10          4           15          14           18  ║
        ║   10.9        1           12          11           12  ║
        ║   11.9        2           14          12           14  ║
        ╚════════════════════════════════════════════════════════╝


TCP: Congestion Control
    - approach the congestion control issue from the end agents
    - TCP sends segments to the network, without reservation, looking at their behavior and reacting
        - don't depending on routers queue Policies
        
    ** How TCP agents react based on the network behaviour **
    
    - Outline:
        - TCP computes how many segments fits inside a non congested network
        - for each received ACK, a new segment is sent
        - Adaptative process. Network load changes along time
        - Different strategies. Non exclusive

        ** for each ACK received, the number of segments sent are increased **


    - Congestion Window
        - TCP defines a new variable CongestionWindow (cwnd)
        - Equivalent to AdvertisedWindow (flow control), but at transmitter end
        - Effective window is defined again as follows:

            MaxWindow = MIN(cwnd, AdvertisedWindow)
            EffectiveWindow = MaxWindow - (LastByteSent - LastByteAck)
        
        ** Remeber: EffectiveWindow from the TCP view point is the amount of maximum segments a TCP agents can sent to the network without acknowledgment **
        ** LastByteSent - LastByteAck = amount of info sent to the receiver but not acknowledged **
        ** AdvertisedWindow = counter fullfilled by the receiver to inform transimitter how many info can be sent before collapse its receiver buffers **
        ** cwnd = computed by the Tx, how many segments fits into the network before collapseing **
        ** MaxWindow = depends on the network congestion and receiver collapse **
        ** So, minimizing between cwnd and AdvertisedWindow, is achieved both effects => flow control and congestion control **

        - How CongestionWindow is computed determines the congestion control mechanism:
            - Original/nil, Additive increase/Multiplicative decrease, Slow start, Vegas ...


Original (no control) => rough/basic control:
    - CongestionWindow maximum value, CWMAX
    - cwnd initial value (usually 1 MSS). cwini
    - When an ACK is received, cwnd = CWMAX
    - When TimeOut, cwnd = cwini

    - only two values => low or high, as binary values