
Additive increase/Multiplicative decrease
    - improve of the original algorithm

    - CWMAX, CongestionWindow absolute maximum value
    - cwini, cwnd initial value (usuarlly 1 MSS)
    - cwmax, cwnd maximum value (initially set to CWMAX)
    - When an ACK is received,
        
            if cwnd < cwmax {
                cwnd = cwmax
            }
            else {
                cwnd += MSS/cwnd => ADDITIVE INCREASE
                cwmax = MIN(CWMAX, cwnd)
            }
    
    - When TimeOut,

            cwnd = cwini
            cwmax = MAX(cwini,  cwmax/2) => MULTIPLICATIVE DECREASE

    - Idea: TimeOut => retransmissions => worst congestion => fast reaction
    - RTT must be estimated accurately => adaptative retransmission
        - RTT will tell when a TimeOut is produced


Slow Start:
    - improvement of previous one
    - performs better
    
    - CWMAX, CongestionWindow absolute maximum value
    - cwini, cwnd initial value (usually 1 MSS)
    - cwmax, cwnd maximum value (initially set to CWMAX)
    - When an ACK is received,
        
            if cwnd z cwmax { (exponential increase)
                cwnd += MSS
            }
            else { (linear increase)
                cwnd += MSS/cwnd
                cwmax=MIN(CWMAX, cwnd)
            }
    
    - When TimeOut,

            cwnd = cwini
            cwmax = MAX(cwini, cwmax/2)


** 3 Different mechanisms of Congestion Control: Original, Additive and SlowStart **
** But aside that mechanisms there are a few improvements: Fast Retransmit and Fast Recovery **

Fast Retransmit
    - helps TCP with retransmissions before TimeOut
    - send retransmissions before timeOut produced => How can i detect a timeOut before produced?

    - When receiver gets a segment out of sequence => sends an ACK of the last in-sequence segment
    - transmitter will receive a duplicated ACK
    - When 3 duplicated ACKs in a row
        - re-sent the lost segment
        - cwnd=cwini, cwmax=cwmax/2 and slow-start
    - around half of the total TimeOut saved => improving throughput by 20%

    ** Fast Retransmit gets 8% more transmissions **

Fast Recovery
    - When duplicate ACKs arrive, CongestionWindow reduces to half
    - At this point, increase linearly, avoiding slow start phase
    - Even though, TimeOuts occur, do slow start (multiplicative increase)

** 11% more transmissions with Fast Retransmit and Fast Recovery together **