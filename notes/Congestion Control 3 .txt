Congestion: Other mechanisms

- TCP congestion control mechanisms are "reactive" (the ones viewed)
- Let's see how "preventive" mechanisms work (Congestion avoidance)
    - Random Early Detection (RED) => work only in routers
    - Source based => work only in transmitters (Tx) => also called TCP Vegas


Random Early Detection (RED)

    - routers monitor their queues. Just before congestion, segments are bit marked or selectively dropped out
    - transmitter being informed
        - TimeOuts
        - duplicate ACKs
    - Objective: decrease CongestionWindow before congestion by dropping out some segments => DropTail?

    ** Idea: drop some segments before the congestion on the routers is produced, before routers queues are full **
    ** How do we know when to drop? When this drops must be produced? **

    Queue monitoring
        - RED periodically computes the queu average length (AvgLen) by filtering

                (Low pass filter)
                AvgLen = (1 - α) · AvgLen + α · SampleLen

            being SampleLen the sampled lehgnt and 0 <= α <= 1

        - 2 thresholds defined, MinTh i MaxTh, and the folowwing policy

            if AvgLen <= MinTh {
                - put the segment in queue
            }

            if MinTh < AvgLen < MaxTh {
                - compute probability P
                - drop out segment with probability P
            }

            if AvgLen >= MaxTh {
                - drop out segment
            }

    Problems:
        - segments sometimes dropped out at bursts
        - no more than a segment in less than RTT should be withdrawn:
            - one segment is enough to stop increasing the congestion window (with fast retransmit) => the Tx will react
            - dropping out more than one segment could lead Transmitter to slow start
        
    Improvements:

            P' = MaxP · [(AvgLen - MinTh) - (MaxTh - MinTh)]

            P = [P' / (1 - counter · P')]

        being counter the number of segments enqueued from the last drop out

    Some Thoughts:
        - RED requires a larger queu than MaxTh in order to absorb variations between following measurements
        - When a queu is full, segments are dropped (drop tail)
        - 100 ms could be a good time between samples. It has no sense take more than a sample inside the same RTT


Source-Based Congestion Avoidance
    - algorithms detecting congestion from the source end
    - different aspects:
        - How they detect when congestion starts: RTT increases, throughput changes ...
        - How they reacts
    - TCP Implementations:
        - TCP Tahoe (BSD Network Release 1): It is a TCP with Jacobson/Karels algorithm including the before explained congestion control mechanisms (but fast recovery)
        - TCP Reno (BRN 2) includes fast recovery and more (delayed ACK)
        - TCP Vegas: adds source-based congestion avoidance

    TCP Vegas
        - based on the detection of throughput saturation. Following the facts occur:
            - While CongestionWindow increases, measured throughput by the transmitter keeps stable
            - Routers start to be saturated