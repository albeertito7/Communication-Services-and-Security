TCP: Flow Control

TCP Sliding Window
    - allows:
        - segment delivery guarantee => detects segment lost, and allows the transmiter to retransmit
        - segment order guarantee => receiver reordering based on the SequenceNumber
        - transmission and reception rate synchronization (flow control) using "AdvertisedWindow" TCP segment field
    - Objective: define an "Effective Window" => measure that allows to adapt the transmiter pace to the receiver one


How delivery and order is guaranteed?

            Transmitter Application                                                 Receiver Application
    ------------------------------------------------------------------------------------------------------------------- TCP

                                LastByteWritten                                 LastByteRead         
                                ↓                                               ↓                                                       
    ──────────────────────────────────────                                  ──────────────────────────────────────
                │████████│██████│                                               │██████████│          │████│            Buffers (fulfill from left to right)
    ──────────────────────────────────────                                  ──────────────────────────────────────
                ↑        ↑                                                                 ↑               ↑
      LastByteAck        LastByteSent                                      NextByteExpected                LastByteRecvd


    - LastByteWritten => last byte written in the buffer by the TX_Application
    - LastByteSent => last byte sent to the receiver
    - LastByteAck => last byte acknowledged

    - all bytes before "LastByteAck" can be erased
    - all the info sent but not acknowledged must be keep in the buffer (LastByteAck > X <= LastByteSent) => in case retransmition is needed
    - all the info written but not sent (LastByteSent < X <= LastByteWritten) => info not retransmited yet

    - LastByteRead => last byte read by the receiver application
    - NextByteExpected => the next byte expected to receive
    - LastByteRecvd => last byte received from the transmitter

    - all info before "LastByteRead" can be erased from the buffer because the application already got it
    - there could be some lacks in the buffer of information not received yet, or maybe some information out of order => ordering occurs in the TCP Buffer
    - bytes < NextByteExpected can be acknowledged, but the rest not because even having some more information this will be disordered

    - following inequalities:
        - for TX:
            - LastByteAck <= LastByteSent
            - LastByteSent <= LastByteWritten
            - LastByteAck <= LastByteWritten
        - for RX:
            - LastByteRead < NextByteExpected
            - LastByteRead <= LastByteRecvd
            - NextByteExpected <= LastByteRecvd+1


    - both buffers have a MAXIMUM SIZE: MaxSenderBuffer and MaxRcvBuffer
    - at TX => LastByteWritten - LastByteAck <= MaxSenderBuffer
    - at RX => LastByteRcvd - LastByteRead <= MaxRcvBuffer

    - to avoid RX Saturation => AdvertisedWindow = MaxRcvBuffer - (LastByteRcvd - LastByteRead) => How much space is available in the RX Buffer?
    - TX must collaborate => EffectiveWindow = AvertiseWindow - (LastByteSent - LastByteAck) => How much bytes can TX sent and not collapse RX Buffer?

    - if EffectiveWindow = 0, TX can not sent any segment
    - if EffectiveWindow = 1, TX can send up to 1 MSS



Wrapping the counters
    - TCP has 32 bits for SequenceNumber. Problem: a lost segment must be waited for MSL seconds (typically 120s). During this time lapse, counters must not be wrapped

        Transmitter                                 Receiver

    ┌→   ┌→ │                                          │                Segment = TCP Data Unit in bytes transmited
    │  T ┤  ▓   Segment                                │                T = Segment transmission time = segment size (b) / Transmitter rate (b/s) = (s)
    │    ├→ ▓                                          │                if no intermediate network, τ = distance (m) / c (m/s) = (s)
    │    │  │                                          │                Round Trip Time (RTT) = T + 2·τ
    │    │  │                                          │                When the communication is direct => RTT is DETERMINISTIC
    │    │  │                                          │
RTT ┤  τ ┤  │                                          │
    │    │  │                                          │
    │    │  │                                          │
    │    └→ │ - - - - - - - - - - - - - - - - - - - - -│ Estimated segment arrival time
    │       │                                          │
    │       │                                          │
    │       │                                          │
    └─────→ │←──  Ack Received                         │
            │                                          │

    - Which is the time that the transmitter must wait till considering the segment has been lost?
        - the TimeOut should be slightly bigger than the RTT => TO > RTT

        - if TO < RTT, the segment will be retransmitted when no needed
        - if TO >>> RTT, if the segment is lost the transmitter will wait too much time => INEFFICIENCY

        ** A good TimeOut is crucial for the TCP Efficiency **


    - But, What happens if there is an intermediate network? => the connection is not direct
        - τ is not deterministic, is STHOCASTIC => RTT not deterministic as well
        - τ will change according to the intermediate network congestion
        - so, we must perform an ESTIMATION, taking into account RTT may constantly change because of intermediate network congestion


RTT Estimation
    - Original algorithm
        - measure RTT for each sent segment
        - every time a segment is sent and we receive the acknowledgement, we mesure the RTT
        
        - RTT is updated according to:
            RTTestimated = α · RTTestimated_previous + (1 - α) · RTT
        - where α is between 0.8 and 0.9 and acts as a weighting factor among what we estimated previously and what we measured
        - actually α = 7/8, in the TCP Kernel
        - RTTestimated_previous = the previous estimated RTT
        - RTT = what we mesured for the segment that has been acknowledged

        - Finally, TimeOut = 2 · RTTestimated


    - Second algorithm: Karn/Partridge algorithm => arise because when estimate RTT with the original algorithm may be some problems
        - Problem: RTT underestimated when TimeOut is shorter than RTT, because is not clear for TX to which transmission (first or the retrans) the received ack corresponds

          ┌→├──→ trans #seq                         ¦          ** So, the RTT is not-well calculated,
          │ ¦                                       ¦             because the transmitter considers the ack as the one for the retrans
 TimeOut  ┤ ¦                                       ¦             as a result, RTT is understimated **
          │ ¦                trans #seq received ──→¦
          │ ¦                           ack #seq ←──┤           If several loses occurs, TimeOut might increase exponentially,
          ├→├──→ retrans #seq                       ¦           because RTT would approach zero
          │ ¦                                       ¦
     RTT  ┤ ¦                                       ¦
          │ ¦                                       ¦
          └→¦←── ack #seq received                  ¦

        - Solution:
            - Measuring RTT only when no retransmission
            - Double TimeOut at each retransmission => as congestion is the main cause of retransmissions, one acts aggressively


    - Third algorithm: Jacobson/Karels algorithm
        - apart from considering RTT, but also its VARIANCE
        - when variance is small, take RTTestimated as a better choice than double TimeOut
        - when variance is high, don't rely on RTTestimated

            Diff = RTT - RTTestimated
            RTTestimated = RTTestimated + δ · Diff
            Deviation = Deviation + δ(|Diff| - Deviation)
            TimeOut = μ · RTTestimated + φ · Deviation

            where typically, 0 < δ < 1, μ ≈ 1 and φ ≈ 4

        - if RTT doesn't change => Deviation doesn't change => low variance => RTTestimated is the most important
        - if RTT change a lot => Deviation is high, thus takes importance => high variance => Deviation affects to the TimeOut => acction aggressively φ ≈ 4

        - typically, congestion => high RTT variance